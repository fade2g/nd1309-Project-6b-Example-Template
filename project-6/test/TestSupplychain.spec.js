// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain')

contract('SupplyChain', function (accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originFarmerID = accounts[1]
    const originFarmName = "John Doe"
    const originFarmInformation = "Yarray Valley"
    const originFarmLatitude = "-38.239770"
    const originFarmLongitude = "144.341490"
    var productID = sku + upc
    const productNotes = "Best beans for Espresso"
    const productPrice = web3.utils.toWei('0.000000005', "ether");
    const distributorPayment = web3.utils.toWei('0.000000007', "ether");
    const consumerPayment = distributorPayment;
    var itemState = 0
    const distributorID = accounts[2]
    const retailerID = accounts[3]
    const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'

    // Available Accounts
    // ==================
    // (0) 0x36eea736404d8fa4270411269ef8590e9579d795
    // (1) 0x7c8d6b29b5abf484994d9d9672c5422296087071
    // (2) 0x40d5ca835633ddf1a7226b5b8108b9d23b5312cc
    // (3) 0x73452cedaec50ab9401ddda5652379a00a4ec8d9
    // (4) 0x8abd9c233f5d92aeb9032e1e7b0bdc9e921b327d
    // (5) 0x783333cbdd17223dd9fd338cda1a1345a4d1af20
    // (6) 0x3cb706a6841db8628b38c67000c8f7d525360de6
    // (7) 0xe6588af849b73d67c53d7cf313c151544797abb7
    // (8) 0x43abe69078d9ff1fd51db08a95f611437b378c8e
    // (9) 0x35f5db9b159d64a69b1c80b69ab590088ed0d146

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Farmer: accounts[1] ", accounts[1])
    console.log("Distributor: accounts[2] ", accounts[2])
    console.log("Retailer: accounts[3] ", accounts[3])
    console.log("Consumer: accounts[4] ", accounts[4])

    function assertBufferOne(actual, expectedOwnerID) {
        assert.equal(actual[0], sku, 'Error: Invalid item SKU')
        assert.equal(actual[1], upc, 'Error: Invalid item UPC')
        assert.equal(actual[2], expectedOwnerID, 'Error: Missing or Invalid ownerID')
        assert.equal(actual[3], originFarmerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(actual[4], originFarmName, 'Error: Missing or Invalid originFarmName')
        assert.equal(actual[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(actual[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(actual[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude')
    }

    function assertBufferTwo(actual, expectedState) {
        assert.equal(actual[0], sku, 'Error: Invalid item SKU')
        assert.equal(actual[1], upc, 'Error: Invalid item UPC')
        assert.equal(actual[2], productID, 'Error: Missing or Invalid productID')
        assert.equal(actual[3], productNotes, 'Error: Missing or Invalid productNotes')
        assert.equal(actual[4], productPrice, 'Error: Missing or Invalid productPrice')
        assert.equal(actual[5], expectedState, 'Error: Missing or Invalid itemState')
        assert.equal(actual[6], distributorID, 'Error: Missing or Invalid distributorID')
        assert.equal(actual[7], retailerID, 'Error: Missing or Invalid retailerID')
        assert.equal(actual[8], consumerID, 'Error: Missing or Invalid consumerID')
    }

    async function addRolesToDeployedContract(supplyChain) {
        await supplyChain.addFarmer(originFarmerID);
        await supplyChain.addDistributor(distributorID);
        await supplyChain.addRetailer(retailerID);
        await supplyChain.addConsumer(consumerID);
    }

    // 1st Test
    it("Testing smart contract function harvestItem() that allows a farmer to harvest coffee", async () => {
        const supplyChain = await SupplyChain.deployed();
        await addRolesToDeployedContract(supplyChain);

        // Declare and Initialize a variable for event
        let eventEmitted = false

        // Watch the emitted event Harvested()
        await supplyChain.Harvested((err, res) => {
            eventEmitted = true;
        })

        // Mark an item as Harvested by calling function harvestItem()
        await supplyChain.harvestItem(upc, originFarmerID, originFarmName, originFarmInformation, originFarmLatitude, originFarmLongitude, productNotes)

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(eventEmitted, true, 'Invalid event emitted');

        assertBufferOne(resultBufferOne, originFarmerID);

        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID');
        assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName');
        assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation');
        assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude');
        assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude');
        assert.equal(resultBufferTwo[5], 0, 'Error: Invalid item State');
    })

    // 2nd Test
    it("Testing smart contract function processItem() that allows a farmer to process coffee", async () => {
        const supplyChain = await SupplyChain.deployed()
        await addRolesToDeployedContract(supplyChain);

        // Declare and Initialize a variable for event
        let eventEmitted = false;

        // Watch the emitted event Processed()
        await supplyChain.Processed((err, res) => {
            eventEmitted = true;
        });

        // Mark an item as Processed by calling function processItem()
        await supplyChain.processItem(upc, {from: originFarmerID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(eventEmitted, true, 'Invalid event emitted');
        assert.equal(resultBufferTwo[5], 1, 'Error: Invalid item State');
    })

    // 3rd Test
    it("Testing smart contract function packItem() that allows a farmer to pack coffee", async () => {
        const supplyChain = await SupplyChain.deployed();
        await addRolesToDeployedContract(supplyChain);
        // Declare and Initialize a variable for event
        let eventEmitted = false;

        // Watch the emitted event Processed()
        await supplyChain.Packed((err, res) => {
            eventEmitted = true;
        });

        // Mark an item as Packed by calling function packItem()
        await supplyChain.packItem(upc, {from: originFarmerID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(eventEmitted, true, 'Invalid event emitted');
        assert.equal(resultBufferTwo[5], 2, 'Error: Invalid item State');

    })

    // 4th Test
    it("Testing smart contract function sellItem() that allows a farmer to sell coffee", async () => {
        const supplyChain = await SupplyChain.deployed()
        await addRolesToDeployedContract(supplyChain);
        // Declare and Initialize a variable for event
        let eventEmitted = false;

        // Watch the emitted event ForSale()
        await supplyChain.ForSale((err, res) => {
            eventEmitted = true;
        });

        // Mark an item as ForSale by calling function sellItem()
        await supplyChain.sellItem(upc, productPrice, {from: originFarmerID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(eventEmitted, true, 'Invalid event emitted');
        assert.equal(resultBufferTwo[4].toString(), web3.utils.toBN(productPrice).toString(), 'Error: Invalid item price');
        assert.equal(resultBufferTwo[5], 3, 'Error: Invalid item State');
    })

    // 5th Test
    it("Testing smart contract function buyItem() that allows a distributor to buy coffee", async () => {
        const supplyChain = await SupplyChain.deployed();
        await addRolesToDeployedContract(supplyChain);

        // Declare and Initialize a variable for event
        let eventEmitted = false;

        // Watch the emitted event Sold()
        await supplyChain.Sold((err, res) => {
            eventEmitted = true;
        });


        // Mark an item as Sold by calling function buyItem()
        await supplyChain.buyItem(upc, {from: distributorID, value: distributorPayment});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(eventEmitted, true, 'Invalid event emitted');
        assert.equal(resultBufferOne[2], distributorID, 'Error: Invalid owner ID, should be distributor');
        assert.equal(resultBufferTwo[5], 4, 'Error: Invalid item State');
        assert.equal(resultBufferTwo[6], distributorID, 'Error: Invalid distributor ID');
    })

    // 6th Test
    it("Testing smart contract function shipItem() that allows a distributor to ship coffee", async () => {
        const supplyChain = await SupplyChain.deployed();
        await addRolesToDeployedContract(supplyChain);

        // Declare and Initialize a variable for event
        let eventEmitted = false;

        // Watch the emitted event Shipped()
        await supplyChain.Shipped((err, res) => {
            eventEmitted = true;
        });

        // Mark an item as Shipped by calling function shipItem()
        await supplyChain.shipItem(upc, {from: distributorID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(eventEmitted, true, 'Invalid event emitted');
        assert.equal(resultBufferTwo[5], 5, 'Error: Invalid item State');
    })

    // 7th Test
    it("Testing smart contract function receiveItem() that allows a retailer to mark coffee received", async () => {
        const supplyChain = await SupplyChain.deployed();
        await addRolesToDeployedContract(supplyChain);

        // Declare and Initialize a variable for event
        let eventEmitted = false;

        // Watch the emitted event Received()
        await supplyChain.Received((err, res) => {
            eventEmitted = true;
        });

        // Mark an item as received by calling function buyItem()
        await supplyChain.receiveItem(upc, {from: retailerID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc)

        // Verify the result set
        assert.equal(eventEmitted, true, 'Invalid event emitted');
        assert.equal(resultBufferOne[2], retailerID, 'Error: Invalid owner ID, should be retailer');
        assert.equal(resultBufferTwo[5], 6, 'Error: Invalid item State');
        assert.equal(resultBufferTwo[7], retailerID, 'Error: Invalid retailer ID');
    })

    // 8th Test
    it("Testing smart contract function purchaseItem() that allows a consumer to purchase coffee", async () => {
        const supplyChain = await SupplyChain.deployed()
        await addRolesToDeployedContract(supplyChain);

        // Declare and Initialize a variable for event
        let eventEmitted = false;

        // Watch the emitted event Purchased()
        await supplyChain.Purchased((err, res) => {
            eventEmitted = true;
        });

        // Mark an item as purchased by calling function buyItem()
        await supplyChain.purchaseItem(upc, {from: consumerID, value: consumerPayment});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set
        assert.equal(eventEmitted, true, 'Invalid event emitted');
        assert.equal(resultBufferOne[2], consumerID, 'Error: Invalid owner ID, should be consumer');
        assert.equal(resultBufferTwo[5], 7, 'Error: Invalid item State');
        assert.equal(resultBufferTwo[8], consumerID, 'Error: Invalid retailer ID');

    })

    // 9th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async () => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);

        // Verify the result set:
        assertBufferOne(resultBufferOne, consumerID);

    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async () => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

        // Verify the result set:
        assertBufferTwo(resultBufferTwo, 7);
    })

});

